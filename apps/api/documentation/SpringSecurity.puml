@startuml

package "Security Configuration" {
    class FeatherSecurityConfiguration {
        + securityFilterChain(HttpSecurity): SecurityFilterChain
        + corsConfigurationSource(): CorsConfigurationSource
        + passwordEncoder(): PasswordEncoder
    }

    class FeatherCorsConfiguration {
        + getCorsConfiguration(): CorsConfiguration
    }

    class FeatherManagerConfiguration {
        + authenticationManager(AuthenticationConfiguration): AuthenticationManager
    }

    class FeatherOAuth2Configuration {
        + clientRegistrations(): List<ClientRegistration>
    }
}

package "Authentication" {
    interface Authentication {
    }

    abstract class FeatherAuthenticationToken {
        # principal: Object
        # credentials: FeatherCredentials
        # authorities: Collection<GrantedAuthority>
        + getPrincipal(): Object
        + getCredentials(): Object
        + getAuthorities(): Collection<GrantedAuthority>
    }

    class ApiKeyAuthenticationToken {
        + ApiKeyAuthenticationToken(Object, String)
    }

    class JwtTokenAuthenticationToken {
        + JwtTokenAuthenticationToken(Object, JwtTokenCredentials)
    }

    FeatherAuthenticationToken --|> Authentication
    ApiKeyAuthenticationToken --|> FeatherAuthenticationToken
    JwtTokenAuthenticationToken --|> FeatherAuthenticationToken
}

package "Credentials" {
    record FeatherCredentials {
        - String apiKey
        - String accessToken
        - String refreshToken
    }

    record JwtTokenCredentials {
        - String accessToken
        - String refreshToken
    }

}

package "Authentication Providers" {
    interface AuthenticationProvider {
        + authenticate(Authentication): Authentication
        + supports(Class<?>): boolean
    }

    class ApiKeyAuthenticationProvider {
        - userService: UserService
        - authenticationTokenFactory: AuthenticationTokenFactory
        + authenticate(Authentication): Authentication
        + supports(Class<?>): boolean
    }

    class JwtTokenAuthenticationProvider {
        - jwtTokenValidator: JwtTokenValidator
        - userService: UserService
        - authenticationTokenFactory: AuthenticationTokenFactory
        + authenticate(Authentication): Authentication
        + supports(Class<?>): boolean
    }

    ApiKeyAuthenticationProvider ..|> AuthenticationProvider
    JwtTokenAuthenticationProvider ..|> AuthenticationProvider
}

package "Filters" {
    abstract class OncePerRequestFilter

    class ApiKeyFilter {
        - authenticationManager: AuthenticationManager
        - authenticationEntryPoint: FeatherAuthenticationEntryPoint
        # doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain)
    }

    class JwtTokenFilter {
        - authenticationManager: AuthenticationManager
        - cookieService: CookieService
        - jwtTokenService: JwtTokenService
        - authenticationEntryPoint: FeatherAuthenticationEntryPoint
        # doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain)
    }

    ApiKeyFilter --|> OncePerRequestFilter
    JwtTokenFilter --|> OncePerRequestFilter
}

package "Helpers" {
    class AuthenticationTokenFactory {
        + buildAuthenticationToken(String, String, User): FeatherAuthenticationToken
        - combineAuthorities(Collection<GrantedAuthority>): Set<GrantedAuthority>
    }

    class JwtTokenValidator {
        - jwtTokenService: JwtTokenService
        + validateOrRefreshAccessToken(String, String, User): String
    }
}

package "Exception Handling" {
    class FeatherAuthenticationEntryPoint {
        + commence(HttpServletRequest, HttpServletResponse, AuthenticationException)
    }

    exception ApiKeyAuthenticationException {
        + ApiKeyAuthenticationException(String)
    }

    exception JwtAuthenticationException {
        + JwtAuthenticationException(String)
    }

    exception AuthenticationException {}

    ApiKeyAuthenticationException --|> AuthenticationException
    JwtAuthenticationException --|> AuthenticationException
}

package "OAuth2" {
    enum OAuth2Provider {
        GOOGLE
        GITHUB
        + getRegistrationId(): String
    }
}

' Relationships
FeatherSecurityConfiguration --> ApiKeyFilter
FeatherSecurityConfiguration --> JwtTokenFilter
FeatherSecurityConfiguration --> FeatherCorsConfiguration

ApiKeyAuthenticationProvider --> AuthenticationTokenFactory
JwtTokenAuthenticationProvider -u-> AuthenticationTokenFactory
JwtTokenAuthenticationProvider -u-> JwtTokenValidator

ApiKeyFilter --> ApiKeyAuthenticationProvider
JwtTokenFilter --> JwtTokenAuthenticationProvider

FeatherAuthenticationToken --> FeatherCredentials

hide empty members

@enduml